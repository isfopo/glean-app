// This file is auto-generated by @hey-api/openapi-ts

export type GeoMarker = {
    lat: number;
    lng: number;
};

export type Item = {
    id?: string;
    photo?: string;
    geomarker?: GeoMarker;
    title?: string;
    description?: string;
    createdAt?: string;
};

export type User = {
    did?: string;
    handle?: string;
    profile?: {
        displayName?: string;
        avatar?: string;
        banner?: string;
        description?: string;
        points?: number;
    };
    createdAt?: string;
};

export type GetHealthData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type GetHealthResponses = {
    /**
     * Server is healthy
     */
    200: {
        status?: string;
        timestamp?: string;
        version?: string;
    };
};

export type GetHealthResponse = GetHealthResponses[keyof GetHealthResponses];

export type GetClientMetadataJsonData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/client-metadata.json';
};

export type GetClientMetadataJsonResponses = {
    /**
     * OAuth client metadata retrieved successfully
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetClientMetadataJsonResponse = GetClientMetadataJsonResponses[keyof GetClientMetadataJsonResponses];

export type GetWellKnownOauthProtectedResourceData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/.well-known/oauth-protected-resource';
};

export type GetWellKnownOauthProtectedResourceResponses = {
    /**
     * OAuth protected resource metadata
     */
    200: {
        authorization_servers?: Array<string>;
    };
};

export type GetWellKnownOauthProtectedResourceResponse = GetWellKnownOauthProtectedResourceResponses[keyof GetWellKnownOauthProtectedResourceResponses];

export type PostApiAuthLoginData = {
    body?: never;
    headers: {
        /**
         * Authorization header with Bluesky credentials in the format "Basic base64(username:password)"
         */
        Authorization: string;
    };
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type PostApiAuthLoginErrors = {
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PostApiAuthLoginError = PostApiAuthLoginErrors[keyof PostApiAuthLoginErrors];

export type PostApiAuthLoginResponses = {
    /**
     * Login successful
     */
    200: {
        session?: {
            [key: string]: unknown;
        };
    };
};

export type PostApiAuthLoginResponse = PostApiAuthLoginResponses[keyof PostApiAuthLoginResponses];

export type GetApiAuthOauthCallbackData = {
    body?: never;
    path?: never;
    query: {
        code: string;
        state: string;
        iss?: string;
    };
    url: '/api/auth/oauth/callback';
};

export type GetApiAuthOauthCallbackErrors = {
    /**
     * Authentication failed
     */
    500: {
        error?: string;
    };
};

export type GetApiAuthOauthCallbackError = GetApiAuthOauthCallbackErrors[keyof GetApiAuthOauthCallbackErrors];

export type GetApiAuthOauthCallbackResponses = {
    /**
     * Authentication successful
     */
    200: {
        success?: boolean;
        did?: string;
    };
};

export type GetApiAuthOauthCallbackResponse = GetApiAuthOauthCallbackResponses[keyof GetApiAuthOauthCallbackResponses];

export type GetApiAuthSessionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/session';
};

export type GetApiAuthSessionErrors = {
    /**
     * Not authenticated
     */
    401: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiAuthSessionError = GetApiAuthSessionErrors[keyof GetApiAuthSessionErrors];

export type GetApiAuthSessionResponses = {
    /**
     * Current session
     */
    200: {
        did?: string;
    };
};

export type GetApiAuthSessionResponse = GetApiAuthSessionResponses[keyof GetApiAuthSessionResponses];

export type PostApiAuthLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type PostApiAuthLogoutErrors = {
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PostApiAuthLogoutError = PostApiAuthLogoutErrors[keyof PostApiAuthLogoutErrors];

export type PostApiAuthLogoutResponses = {
    /**
     * Logged out successfully
     */
    200: {
        success?: boolean;
    };
};

export type PostApiAuthLogoutResponse = PostApiAuthLogoutResponses[keyof PostApiAuthLogoutResponses];

export type GetApiItemsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/items';
};

export type GetApiItemsErrors = {
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiItemsError = GetApiItemsErrors[keyof GetApiItemsErrors];

export type GetApiItemsResponses = {
    /**
     * A list of items
     */
    200: Array<Item>;
};

export type GetApiItemsResponse = GetApiItemsResponses[keyof GetApiItemsResponses];

export type PostApiItemsData = {
    body: {
        /**
         * Image file (JPEG, PNG, or WebP, max 10MB)
         */
        photo?: Blob | File;
        /**
         * JSON string with lat/lng coordinates
         */
        geomarker?: string;
        title?: string;
        description?: string;
    };
    path?: never;
    query?: never;
    url: '/api/items';
};

export type PostApiItemsErrors = {
    /**
     * Bad request
     */
    400: {
        error?: string;
    };
    /**
     * Unauthorized
     */
    401: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PostApiItemsError = PostApiItemsErrors[keyof PostApiItemsErrors];

export type PostApiItemsResponses = {
    /**
     * Item created successfully
     */
    201: Item;
};

export type PostApiItemsResponse = PostApiItemsResponses[keyof PostApiItemsResponses];

export type GetApiItemsLocationData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lng: number;
        /**
         * Search radius in kilometers
         */
        radius?: number;
    };
    url: '/api/items/location';
};

export type GetApiItemsLocationErrors = {
    /**
     * Bad request
     */
    400: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiItemsLocationError = GetApiItemsLocationErrors[keyof GetApiItemsLocationErrors];

export type GetApiItemsLocationResponses = {
    /**
     * A list of items
     */
    200: Array<Item>;
};

export type GetApiItemsLocationResponse = GetApiItemsLocationResponses[keyof GetApiItemsLocationResponses];

export type DeleteApiItemsByIdData = {
    body?: never;
    path: {
        /**
         * Item ID
         */
        id: string;
    };
    query?: never;
    url: '/api/items/{id}';
};

export type DeleteApiItemsByIdErrors = {
    /**
     * Unauthorized
     */
    401: {
        error?: string;
    };
    /**
     * Item not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type DeleteApiItemsByIdError = DeleteApiItemsByIdErrors[keyof DeleteApiItemsByIdErrors];

export type DeleteApiItemsByIdResponses = {
    /**
     * Item deleted successfully
     */
    200: {
        success?: boolean;
    };
};

export type DeleteApiItemsByIdResponse = DeleteApiItemsByIdResponses[keyof DeleteApiItemsByIdResponses];

export type GetApiItemsByIdData = {
    body?: never;
    path: {
        /**
         * Item ID
         */
        id: string;
    };
    query?: never;
    url: '/api/items/{id}';
};

export type GetApiItemsByIdErrors = {
    /**
     * Item not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiItemsByIdError = GetApiItemsByIdErrors[keyof GetApiItemsByIdErrors];

export type GetApiItemsByIdResponses = {
    /**
     * The requested item
     */
    200: Item;
};

export type GetApiItemsByIdResponse = GetApiItemsByIdResponses[keyof GetApiItemsByIdResponses];

export type GetApiUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type GetApiUsersErrors = {
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiUsersError = GetApiUsersErrors[keyof GetApiUsersErrors];

export type GetApiUsersResponses = {
    /**
     * A list of users
     */
    200: Array<User>;
};

export type GetApiUsersResponse = GetApiUsersResponses[keyof GetApiUsersResponses];

export type GetApiUsersByIdentifierData = {
    body?: never;
    path: {
        /**
         * User handle or DID
         */
        identifier: string;
    };
    query?: never;
    url: '/api/users/{identifier}';
};

export type GetApiUsersByIdentifierErrors = {
    /**
     * User not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiUsersByIdentifierError = GetApiUsersByIdentifierErrors[keyof GetApiUsersByIdentifierErrors];

export type GetApiUsersByIdentifierResponses = {
    /**
     * The requested user profile
     */
    200: User;
};

export type GetApiUsersByIdentifierResponse = GetApiUsersByIdentifierResponses[keyof GetApiUsersByIdentifierResponses];

export type PutApiUsersProfileData = {
    body?: {
        /**
         * Avatar image file (JPEG, PNG, or WebP, max 1MB)
         */
        avatar?: Blob | File;
        /**
         * Banner image file (JPEG, PNG, or WebP, max 1MB)
         */
        banner?: Blob | File;
        displayName?: string;
        description?: string;
    };
    path?: never;
    query?: never;
    url: '/api/users/profile';
};

export type PutApiUsersProfileErrors = {
    /**
     * Unauthorized
     */
    401: {
        error?: string;
    };
    /**
     * User not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PutApiUsersProfileError = PutApiUsersProfileErrors[keyof PutApiUsersProfileErrors];

export type PutApiUsersProfileResponses = {
    /**
     * Profile updated successfully
     */
    200: User;
};

export type PutApiUsersProfileResponse = PutApiUsersProfileResponses[keyof PutApiUsersProfileResponses];

export type DeleteApiUsersAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users/account';
};

export type DeleteApiUsersAccountErrors = {
    /**
     * Unauthorized
     */
    401: {
        error?: string;
    };
    /**
     * User not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type DeleteApiUsersAccountError = DeleteApiUsersAccountErrors[keyof DeleteApiUsersAccountErrors];

export type DeleteApiUsersAccountResponses = {
    /**
     * Account deleted successfully
     */
    200: {
        success?: boolean;
    };
};

export type DeleteApiUsersAccountResponse = DeleteApiUsersAccountResponses[keyof DeleteApiUsersAccountResponses];

export type PutApiUsersPointsData = {
    body: {
        /**
         * New points value
         */
        points?: number;
    };
    path?: never;
    query?: never;
    url: '/api/users/points';
};

export type PutApiUsersPointsErrors = {
    /**
     * Unauthorized
     */
    401: {
        error?: string;
    };
    /**
     * User not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type PutApiUsersPointsError = PutApiUsersPointsErrors[keyof PutApiUsersPointsErrors];

export type PutApiUsersPointsResponses = {
    /**
     * Points updated successfully
     */
    200: User;
};

export type PutApiUsersPointsResponse = PutApiUsersPointsResponses[keyof PutApiUsersPointsResponses];

export type GetApiLexiconsByIdData = {
    body?: never;
    path: {
        /**
         * Lexicon ID
         */
        id: string;
    };
    query?: never;
    url: '/api/lexicons/{id}';
};

export type GetApiLexiconsByIdErrors = {
    /**
     * Lexicon not found
     */
    404: {
        error?: string;
    };
    /**
     * Internal server error
     */
    500: {
        error?: string;
    };
};

export type GetApiLexiconsByIdError = GetApiLexiconsByIdErrors[keyof GetApiLexiconsByIdErrors];

export type GetApiLexiconsByIdResponses = {
    /**
     * The requested lexicon
     */
    200: {
        [key: string]: unknown;
    };
};

export type GetApiLexiconsByIdResponse = GetApiLexiconsByIdResponses[keyof GetApiLexiconsByIdResponses];

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};
