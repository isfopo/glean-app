// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';
import type { GetHealthData, GetHealthResponses, GetClientMetadataJsonData, GetClientMetadataJsonResponses, GetWellKnownOauthProtectedResourceData, GetWellKnownOauthProtectedResourceResponses, PostApiAuthLoginData, PostApiAuthLoginResponses, PostApiAuthLoginErrors, GetApiAuthOauthCallbackData, GetApiAuthOauthCallbackResponses, GetApiAuthOauthCallbackErrors, GetApiAuthSessionData, GetApiAuthSessionResponses, GetApiAuthSessionErrors, PostApiAuthLogoutData, PostApiAuthLogoutResponses, PostApiAuthLogoutErrors, GetApiItemsData, GetApiItemsResponses, GetApiItemsErrors, PostApiItemsData, PostApiItemsResponses, PostApiItemsErrors, GetApiItemsLocationData, GetApiItemsLocationResponses, GetApiItemsLocationErrors, DeleteApiItemsByIdData, DeleteApiItemsByIdResponses, DeleteApiItemsByIdErrors, GetApiItemsByIdData, GetApiItemsByIdResponses, GetApiItemsByIdErrors, GetApiUsersData, GetApiUsersResponses, GetApiUsersErrors, GetApiUsersByIdentifierData, GetApiUsersByIdentifierResponses, GetApiUsersByIdentifierErrors, PutApiUsersProfileData, PutApiUsersProfileResponses, PutApiUsersProfileErrors, DeleteApiUsersAccountData, DeleteApiUsersAccountResponses, DeleteApiUsersAccountErrors, PutApiUsersPointsData, PutApiUsersPointsResponses, PutApiUsersPointsErrors, GetApiLexiconsByIdData, GetApiLexiconsByIdResponses, GetApiLexiconsByIdErrors } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check endpoint
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * OAuth client metadata
 */
export const getClientMetadataJson = <ThrowOnError extends boolean = false>(options?: Options<GetClientMetadataJsonData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetClientMetadataJsonResponses, unknown, ThrowOnError>({
        url: '/client-metadata.json',
        ...options
    });
};

/**
 * OAuth protected resource metadata
 */
export const getWellKnownOauthProtectedResource = <ThrowOnError extends boolean = false>(options?: Options<GetWellKnownOauthProtectedResourceData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetWellKnownOauthProtectedResourceResponses, unknown, ThrowOnError>({
        url: '/.well-known/oauth-protected-resource',
        ...options
    });
};

/**
 * Direct login with Bluesky credentials
 */
export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiAuthLoginResponses, PostApiAuthLoginErrors, ThrowOnError>({
        url: '/api/auth/login',
        ...options
    });
};

/**
 * OAuth callback to complete authentication
 */
export const getApiAuthOauthCallback = <ThrowOnError extends boolean = false>(options: Options<GetApiAuthOauthCallbackData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiAuthOauthCallbackResponses, GetApiAuthOauthCallbackErrors, ThrowOnError>({
        url: '/api/auth/oauth/callback',
        ...options
    });
};

/**
 * Get current session
 */
export const getApiAuthSession = <ThrowOnError extends boolean = false>(options?: Options<GetApiAuthSessionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiAuthSessionResponses, GetApiAuthSessionErrors, ThrowOnError>({
        url: '/api/auth/session',
        ...options
    });
};

/**
 * Log out of the current session
 */
export const postApiAuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAuthLogoutResponses, PostApiAuthLogoutErrors, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Get all items
 */
export const getApiItems = <ThrowOnError extends boolean = false>(options?: Options<GetApiItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiItemsResponses, GetApiItemsErrors, ThrowOnError>({
        url: '/api/items',
        ...options
    });
};

/**
 * Create a new item
 */
export const postApiItems = <ThrowOnError extends boolean = false>(options: Options<PostApiItemsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiItemsResponses, PostApiItemsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/items',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get items by location
 */
export const getApiItemsLocation = <ThrowOnError extends boolean = false>(options: Options<GetApiItemsLocationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiItemsLocationResponses, GetApiItemsLocationErrors, ThrowOnError>({
        url: '/api/items/location',
        ...options
    });
};

/**
 * Delete a specific item by ID
 */
export const deleteApiItemsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiItemsByIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteApiItemsByIdResponses, DeleteApiItemsByIdErrors, ThrowOnError>({
        url: '/api/items/{id}',
        ...options
    });
};

/**
 * Get a specific item by ID
 */
export const getApiItemsById = <ThrowOnError extends boolean = false>(options: Options<GetApiItemsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiItemsByIdResponses, GetApiItemsByIdErrors, ThrowOnError>({
        url: '/api/items/{id}',
        ...options
    });
};

/**
 * Get all users
 */
export const getApiUsers = <ThrowOnError extends boolean = false>(options?: Options<GetApiUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiUsersResponses, GetApiUsersErrors, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

/**
 * Get a user profile by handle or DID
 */
export const getApiUsersByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetApiUsersByIdentifierData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiUsersByIdentifierResponses, GetApiUsersByIdentifierErrors, ThrowOnError>({
        url: '/api/users/{identifier}',
        ...options
    });
};

/**
 * Update the current user's profile
 */
export const putApiUsersProfile = <ThrowOnError extends boolean = false>(options?: Options<PutApiUsersProfileData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiUsersProfileResponses, PutApiUsersProfileErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/users/profile',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete the current user's account
 */
export const deleteApiUsersAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiUsersAccountData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiUsersAccountResponses, DeleteApiUsersAccountErrors, ThrowOnError>({
        url: '/api/users/account',
        ...options
    });
};

/**
 * Update the current user's points
 */
export const putApiUsersPoints = <ThrowOnError extends boolean = false>(options: Options<PutApiUsersPointsData, ThrowOnError>) => {
    return (options.client ?? client).put<PutApiUsersPointsResponses, PutApiUsersPointsErrors, ThrowOnError>({
        url: '/api/users/points',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a lexicon by ID
 */
export const getApiLexiconsById = <ThrowOnError extends boolean = false>(options: Options<GetApiLexiconsByIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetApiLexiconsByIdResponses, GetApiLexiconsByIdErrors, ThrowOnError>({
        url: '/api/lexicons/{id}',
        ...options
    });
};
